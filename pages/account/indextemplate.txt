import React, { useEffect, useState } from 'react';
// import Image from 'next/image';
// import boldLogo from '@/public/og-image.png';
import loginLayoutStyles from '@/styles/layouts/Login.module.scss';
// import { useFormik } from 'formik';
// import { useAuthenticate } from '../../contexts/useAuthenticate';
import Head from 'next/head';
import Link from 'next/link';
// import textInputStyles from '@/styles/components/TextInput.module.scss';
// import textLinkStyles from '@/styles/components/TextLink.module.scss';
// import clsx from 'clsx';
// import authFormStyles from '@/styles/components/AuthForm.module.scss';
// import AuthButton from '@/components/common/AuthButton';
// // import { Input, useToast } from '@chakra-ui/react';
// // import { loginSchema } from '../utils/validation/schema';
// // import { formikErrorMsgFactory } from '../utils/factory/formikErrorMsgFactory';
// import router from 'next/router';

const Login: React.FC = () => {
  // const [isActive, setIsActive] = useState(true);

  // // const toast = useToast();

  // const { login } = useAuthenticate();

  // const [error, setError] = useState('');

  // const _login = async (email: string, password: string) => {
  //   try {
  //     // localStorage.setItem('email', email);
  //     await login(email, password);
  //   } catch (error: any) {
  //     const errorCode = error.code;
  //     const errorMessage = error.message;
  //     // Handle error as needed
  //     console.log('---- An error occurred while _login');
  //     console.log(error);
  //     switch (error.code) {
  //       case 'auth/invalid-credential':
  //         setError('メールアドレスまたはパスワードが違います。');
  //         return;
  //       case 'auth/too-many-requests':
  //         setError(
  //           'Access to this account has been temporarily disabled due to many failed login attempts. You can immediately restore it by resetting your password or you can try again later. ',
  //         );
  //         return;
  //       case 'auth/user-mismatch':
  //       case 'auth/user-not-found':
  //       case 'auth/wrong-password':
  //       default:
  //         break;
  //     }
  //   }
  // };

  // const { values, handleChange, handleSubmit, validateForm } = useFormik({
  //   initialValues: { email: '', password: '' },
  //   // validationSchema: loginSchema,
  //   onSubmit: async (values) => {
  //     setIsActive(false);
  //     // mutateLogin(values);
  //     await _login(values.email, values.password);
  //   },
  // });

  // const checkErrors = async (e: React.FormEvent<Element>) => {
  //   e.preventDefault();
  //   const errors = await validateForm();
  //   const messages =""// formikErrorMsgFactory(errors);
  //   if (messages) {
  //     // toast({
  //     //   description: messages,
  //     //   status: 'error',
  //     //   duration: 3000,
  //     //   isClosable: true,
  //     // });
  //   } else {
  //     handleSubmit();
  //   }
  // };
  return (
    <div >
      <Head>
        <title>ログイン</title>
      </Head>
      <section class="bg-white dark:bg-slate-800">
  <div class="py-8 px-4 mx-auto max-w-2xl lg:py-16">
      <h2 class="mb-4 text-xl font-bold text-gray-900 dark:text-white">アカウント編集</h2>
      <form action="#">
          <div class="grid gap-4 sm:grid-cols-2 sm:gap-6">
              <div class="sm:col-span-2">
                  <label for="name" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">ユーザー名</label>
                  <input type="text" name="name" id="name" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Type product name" required=""/>
              </div>
              <div class="w-full">
                  <label for="brand" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">メールアドレス</label>
                  <input type="email" name="email" id="email" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Product brand" required=""/>
              </div>
              <div class="w-full">
                  <label for="price" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">パスワード</label>
                  <input type="number" name="price" id="price" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="$2999" required=""/>
              </div>
              <div>
                  <label for="item-weight" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">生年月日</label>
                  <input type="date" name="item-weight" id="item-weight" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="12" required=""/>
              </div> 
              <div>
                  <label for="category" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">性別</label>
                  <select id="category" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                      <option value="TV">TV/Monitors</option>
                      <option value="PC">PC</option>
                      <option value="GA">Gaming/Console</option>
                      <option value="PH">Phones</option>
                  </select>
              </div>
              {/* <div class="sm:col-span-2">
                  <label for="description" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Description</label>
                  <textarea id="description" rows="8" class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Your description here"></textarea>
              </div> */}
          </div>
          <button type="submit" class="inline-flex items-center px-5 py-2.5 mt-4 sm:mt-6 text-sm font-medium text-center text-white bg-primary-700 rounded-lg focus:ring-4 focus:ring-primary-200 dark:focus:ring-primary-900 hover:bg-primary-800">
              Add product
          </button>
      </form>
  </div>
</section>
    </div>
  );
};

export default Login;